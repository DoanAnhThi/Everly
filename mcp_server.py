"""Everly MCP server exposing local workflow tools."""

from __future__ import annotations

import base64
import os
from io import BytesIO
from pathlib import Path
from typing import Optional

import dateparser
import pyautogui
import requests
from dotenv import load_dotenv
from mcp.server.fastmcp import FastMCP
from mcp.types import TextContent
from openai import OpenAI


load_dotenv()

PROJECT_ROOT = Path(__file__).resolve().parent
SAMPLE_IMAGE_PATH = PROJECT_ROOT / "train_static" / "coach_tabTraning.png"


def _encode_image_to_base64(image) -> str:
    buffer = BytesIO()
    image.save(buffer, format="PNG")
    return base64.b64encode(buffer.getvalue()).decode()


def _load_sample_image_base64() -> Optional[str]:
    if SAMPLE_IMAGE_PATH.exists():
        return base64.b64encode(SAMPLE_IMAGE_PATH.read_bytes()).decode()
    return None


def _parse_future_date(text: str) -> Optional[str]:
    parsed = dateparser.parse(text, settings={"PREFER_DATES_FROM": "future"})
    if parsed:
        return parsed.strftime("%Y-%m-%d")
    return None


def _call_openai_for_screenshot(question: str, screenshot_b64: str, sample_b64: Optional[str]) -> str:
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        return "OPENAI_API_KEY is not configured. Please set it in your environment or .env file."

    client = OpenAI(api_key=api_key)

    content = [
        {
            "type": "input_text",
            "text": (
                "You are assisting a fitness coach using the Everfit platform. "
                "Carefully read the user's question, review the provided sample layout (if any), "
                "then analyze the actual screenshot to answer precisely. Focus on actionable, clear information."
            ),
        },
    ]

    if sample_b64:
        content.extend(
            [
                {
                    "type": "input_text",
                    "text": (
                        "Sample reference image showing the Everfit training tab layout. "
                        "Use it only as structural guidance."
                    ),
                },
                {"type": "input_image", "image_url": f"data:image/png;base64,{sample_b64}"},
            ]
        )

    content.extend(
        [
            {"type": "input_text", "text": f"User question: {question}"},
            {"type": "input_image", "image_url": f"data:image/png;base64,{screenshot_b64}"},
        ]
    )

    try:
        response = client.responses.create(
            model="gpt-4o-mini",
            input=[{"role": "user", "content": content}],
            max_output_tokens=700,
        )
    except Exception as exc:  # pragma: no cover - network error handling
        return f"Error calling OpenAI API: {exc}"

    if getattr(response, "output_text", None):
        return "\n".join(response.output_text).strip()

    # Fallback: rebuild from output items if output_text not populated
    texts: list[str] = []
    for item in getattr(response, "output", []) or []:
        for content_block in getattr(item, "content", []) or []:
            if getattr(content_block, "type", None) == "output_text":
                texts.append(getattr(content_block, "text", ""))

    return "\n".join(filter(None, texts)) or "No response generated by the model."


server = FastMCP(
    name="Everly MCP Server",
    instructions="Tools for analyzing screenshots and managing Everfit coaching workflows.",
)


@server.tool(
    name="screenshot_analysis",
    description=(
        "Capture the current screen, forward it to OpenAI together with the user's question, "
        "and return a detailed analysis of what is visible."
    ),
)
def screenshot_analysis(question: str) -> list[TextContent]:
    screenshot = pyautogui.screenshot()
    screenshot_b64 = _encode_image_to_base64(screenshot)
    sample_b64 = _load_sample_image_base64()
    answer = _call_openai_for_screenshot(question, screenshot_b64, sample_b64)
    return [TextContent(type="text", text=answer)]


@server.tool(
    name="schedule_workout",
    description=(
        "Schedule a workout via Make.com webhook. Input is a natural-language date, "
        "which will be interpreted as the nearest future date."
    ),
)
def schedule_workout(date: str) -> list[TextContent]:
    parsed = _parse_future_date(date)
    if not parsed:
        return [TextContent(type="text", text="Không hiểu ngày bạn cung cấp.")]

    payload = {"name": "Workout with Everfit", "Date": parsed}
    try:
        response = requests.post(
            "https://hook.eu2.make.com/9ty1og2anuaz4f8xdpvde7pxtkc12sxq",
            json=payload,
            timeout=10,
        )
    except requests.RequestException as exc:  # pragma: no cover - network error handling
        return [TextContent(type="text", text=f"❌ Lỗi khi đặt lịch: {exc}")]

    if response.status_code == 200:
        return [TextContent(type="text", text=f"✅ Đã đặt lịch tập vào {parsed}")]

    return [TextContent(type="text", text=f"❌ Lỗi khi đặt lịch. Mã lỗi: {response.status_code}")]


@server.tool(
    name="send_message_to_client",
    description="Gửi tin nhắn tới học viên thông qua webhook Make.com.",
)
def send_message_to_client(message: str) -> list[TextContent]:
    payload = {"message": message}
    try:
        response = requests.post(
            "https://hook.us2.make.com/m8j6cxm9st36azfve84ve1x7fbgmxbtt",
            json=payload,
            timeout=10,
        )
    except requests.RequestException as exc:  # pragma: no cover - network error handling
        return [TextContent(type="text", text=f"❌ Gửi tin nhắn thất bại: {exc}")]

    if response.status_code == 200:
        return [TextContent(type="text", text=f"✅ Đã gửi tin nhắn: {message}")]

    return [TextContent(type="text", text=f"❌ Gửi tin nhắn thất bại. Mã lỗi: {response.status_code}")]


def main() -> None:
    """Entry point for running the MCP server over stdio."""
    server.run(transport="stdio")


if __name__ == "__main__":
    main()

